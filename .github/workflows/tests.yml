name: CI

on:
  push:
    branches:
      - main
      - dev
      - CI
  pull_request:
    branches:
      - main
      - dev

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies for backend
        run: npm install
        working-directory: ./backend

      - name: Install dependencies for frontend
        run: npm install
        working-directory: ./frontend

      - name: Run backend tests and collect coverage
        run: npm run test:backend
        working-directory: ./backend

      - name: Run frontend tests and collect coverage
        run: npm run test:frontend
        working-directory: ./frontend

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: E2E and Integration
        run: |
        echo "Starting backend and frontend servers, this may take some time..."

        # Start backend server
        (cd /backend && USE_MOCK_DB=true NODE_ENV=test npm start &) # Replace with your actual command to start the backend
        BACKEND_PID=$!

        # Start frontend server
        (cd /frontend && REACT_APP_API_URL=http://localhost:3001 npm start &) # Replace with your actual command to start the frontend
        FRONTEND_PID=$!


        wait $FRONTEND_PID

        sleep 60

        (cd /frontend && npm run test:e2e)

        # Get the actual backend server PID
        BACKEND_PORT=3001 # Replace with the port your backend uses
        BACKEND_PID=$(lsof -t -i:$BACKEND_PORT)

        #get the actual frontend server PID
        FRONTEND_PORT=3000 # Replace with the port your frontend uses
        FRONTEND_PID=$(lsof -t -i:$FRONTEND_PORT)

        # Stop the frontend server
        echo "Stopping frontend server..."
        if [ -n "$FRONTEND_PID" ]; then
          kill $FRONTEND_PID
          echo "Frontend server stopped."
        else
          echo "Frontend server not running."
        fi

        # Stop the backend server
        echo "Stopping backend server..."
        if [ -n "$BACKEND_PID" ]; then
          kill $BACKEND_PID
          echo "Backend server stopped."
        else
          echo "Backend server not running."
        fi

        echo "E2E tests completed."
      

